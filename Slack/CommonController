using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Slack.Core.Integrations.Concrete.Slack;
using Microsoft.AspNetCore.Hosting;
using NGeoHash;

namespace Slack.ControlCenter.Controllers;

public class CommonController : CommonBaseController
{

    private readonly IWebHostEnvironment _environment;

    public CommonController(DataContext masterContext, ReplicaContext replicaContext,
        SlackServiceResolver slackServiceResolver, IWebHostEnvironment environment) : base(masterContext,
        replicaContext, slackServiceResolver)
    {
        _environment = environment;
    }

    [HttpPost]
    public async Task<JsonResult> ErrorMessageSendSlackChannel(
        string message)
    {
        if (string.IsNullOrWhiteSpace(message))
            return new JsonResult(new { success = false });

        string userInfo = default;
        
        if (!string.IsNullOrEmpty(CurrentUserName) && CurrentUserId != 0)
        {
            userInfo = $"Hata alan kullanıcı : {CurrentUserName} ({CurrentUserId})";
        }
        else if(!string.IsNullOrEmpty(CurrentUserName) && CurrentUserId == 0)
        {
            userInfo = $"Hata alan kullanıcı : {CurrentUserName} (Kullanıcı Id Bulunamadı)";
        }
        else if(string.IsNullOrEmpty(CurrentUserName) && CurrentUserId != 0)
        {
            userInfo = $"Hata alan kullanıcı : (Kullanıcı Adı Bulunamadı) ({CurrentUserId})";
        }
        
        message = $"{_environment.EnvironmentName} | {message} | {userInfo}";
        await ControlCenterNotificationSlackClient.PostMessage(message);

        return new JsonResult(new { success = true });
    }
}


